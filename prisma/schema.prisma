// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

// datasource db {
//   provider = "sqlite"
//   url      = "file:./dev.db"
// }

// datasource db {
//   provider = "mysql"
//   url      = env("DATABASE_URL")
// }

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Roles {
  ADMIN
  ADITOR
}

model User {
  id       String @id @default(uuid())
  name     String
  email    String @unique
  password String
  role     Roles  @default(ADMIN)

  createdAt DateTime? @default(now())
  updatedAt DateTime? @default(now())

  @@map("users")
}

model Student {
  id       String @id @default(uuid())
  name     String
  email    String @unique
  password String

  Enrolment Enrolment[]

  createdAt DateTime? @default(now())
  updatedAt DateTime? @default(now())

  @@map("students")
}

//matricula
model Enrolment {
  id        String  @id @default(uuid())
  student   Student @relation(fields: [studentId], references: [id])
  studentId String
  course    Course  @relation(fields: [courseId], references: [id])
  courseId  String

  canceledAt DateTime?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @default(now()) @updatedAt
  //matricula ta associada a um aluno e a um curso

  @@map("enrolments")
}

model Course {
  id          String @id @default(uuid())
  name        String @unique
  description String
  image       String

  classes        Classes[] //1 curso pode ter varias aulas
  modulesCourses ModulesCourses[] // 1 curso pode ter varios modulos

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  Enrolment Enrolment[]

  @@map("courses")
}

model ModulesCourses {
  id   String @id @default(uuid())
  name String

  cousesId String
  course   Course @relation(fields: [cousesId], references: [id]) //1 curso pode ter varios modules

  Classes Classes[]


  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  @@map("modulesCourses")
}

enum TypeClasses {
  QUIZ
  VIDEO
}

model Classes {
  id         String      @id @default(uuid())
  classOrder Int
  type       TypeClasses @default(VIDEO)
  name       String      @unique

  course   Course @relation(fields: [courseId], references: [id]) //1 curso pode ter varias aulas
  courseId String //nome da tabela cursos 

  modulesCourses   ModulesCourses @relation(fields: [modulesCoursesId], references: [id])
  modulesCoursesId String

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  @@map("classes")
}

model Videos {
  id          String   @id @default(uuid())
  name        String
  slug        String?
  description String?
  url         String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())

  @@map("videos")
}

model Quiz {
  id        String   @id @default(uuid())
  question  String
  option1   String
  option2   String
  option3   String
  option4   String
  answer    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  @@map("quizs")
}
